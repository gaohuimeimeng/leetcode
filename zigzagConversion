class Solution {
public:
    string convert(string s, int nRows) {
        int len=s.size();
        string res;
        if(nRows==1)
            return s;
        if(nRows==2){
            for(int i=0;i<len;i+=2){
                res.push_back(s[i]);
            }
            for(int i=1;i<len;i+=2)
                res.push_back(s[i]);
            return res;
        }
        
        int column=len%(2*nRows-2)==0?2*(len/(2*nRows-2)):2*(len/(nRows+nRows-2)+1);
       // int column=2*(len/(2*nRows-2)+1);
        vector<vector<char> >  cvec;
        cvec.resize(nRows);
        for(int i=0;i<nRows;i++)
            cvec[i].resize(column);
            
        int i=0;
        for(int j=0;j<(column-2);i++){
            if(j/2==0){
                for(int m=0;m<nRows;m++,i++)
                   cvec[m][j]=s[i];
            } 
            else{
                for(int m=1;m<(nRows-1);m++,i++)
                  cvec[m][j]=s[i];
            }
        }
        int col=column-2;
        int r=0;
        while(i<len){
            cvec[r][col]=s[i];
            i++;
            if(r==(nRows-1)){
               r=1; 
               col++;
            }
            else 
                r++;
        }
     /*   for(int m=0;m<nRows;m++){
            for(int n=0;n<column;n++){
                if(cvec[m][n]!=' ')
                    res.push_back(cvec[m][n]);
            }
        }*/
        i=0;r=0;col=0;
        while(i<len)
        {
            res.push_back(s[i]);
            i++;
            if(col%2==0&&r==(nRows-1)){
                col++;
                r=1;
            }
            else if(col%2==1&&r==(nRows-2)){
                col++;
                r=0;
            }
            else
                r++;
        }
        return res;
    }
};
